/**
 * JRaD 2015
 * @author Pablo Pu√±al Pereira <pablo@punyal.com>
 * @version 0.1
 */
package com.punyal.jrad.test;

import com.punyal.jrad.core.Utils;
import com.punyal.jrad.core.network.UDPSender;
import com.punyal.jrad.core.radius.AttributesMessage;
import com.punyal.jrad.core.radius.RADIUS;
import com.punyal.jrad.core.radius.RADIUS.Code;
import com.punyal.jrad.core.radius.Request;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.InetAddress;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JTree;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;

import java.net.SocketException;
import java.net.UnknownHostException;
import java.security.NoSuchAlgorithmException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author gamer
 */
public class ClientGUI3 extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public ClientGUI3() {
        initComponents();
        loadRADIUSValues();
        resetAll();
        startListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jScrollPane2 = new javax.swing.JScrollPane();
        fTable = new javax.swing.JTable(){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        destination = new javax.swing.JTextField();
        destinationPort = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        resetButton = new javax.swing.JButton();
        sendButton = new javax.swing.JButton();
        codeCombo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        SecureRandom random = new SecureRandom();
        seed = random.nextInt();
        mID = new javax.swing.JTextField();
        mID.setEditable(false);
        jLabel4 = new javax.swing.JLabel();
        mAuth = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        mSize = new javax.swing.JTextField();
        mSize.setEditable(false);
        jScrollPane1 = new javax.swing.JScrollPane();
        
        attTreeRoot = new DefaultMutableTreeNode("List of Attributes");
        attTreeModel = new DefaultTreeModel(attTreeRoot);
        attTree = new JTree(attTreeModel);
        
        jPanel3 = new javax.swing.JPanel();
        attTypeCombo = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        tagAttValue = new javax.swing.JLabel();
        attValue = new javax.swing.JTextField();
        attChapIdent = new javax.swing.JTextField();
        tagAttChapIdent = new javax.swing.JLabel();
        vendorID = new javax.swing.JTextField();
        tagVendorID = new javax.swing.JLabel();
        vendorType = new javax.swing.JTextField();
        tagVendorType = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JRaD");
        setResizable(false);

        fTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                
            },
            new String [] {
                "Time", "To", "From", "ID", "Code", "Size", "Message"
            }
        ));
        
        fSorter = new TableRowSorter<>(fTable.getModel());
        fTable.setRowSorter(fSorter);
        
        fTable.getTableHeader().addMouseListener(new ClientGUI3.CustomSorter());
        // Hide Message Column
        fTableModel = fTable.getColumnModel();
        fTableModel.removeColumn(fTableModel.getColumn(6));
        // Auto sort by new messages first
        CustomSorterSort(fTable.getColumnModel().getColumnIndexAtX(0), SortOrder.DESCENDING);
        
        
        jScrollPane2.setViewportView(fTable);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        destination.setText("106.100.195.168");
        

        destinationPort.setText("1812");

        jLabel1.setText(":");
        
        

        resetButton.setText("Reset");
        

        sendButton.setText("Send");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(destination, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(destinationPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(resetButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sendButton)
                .addGap(42, 42, 42))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(destination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(destinationPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendButton)
                    .addComponent(resetButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        
        
        jLabel2.setText("Code");

        jLabel3.setText("ID");

        
        

        jLabel4.setText("Auth");

        
        mAuth.setEditable(false);
        

        jLabel5.setText("Size");

        
        attTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        attTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                attTreeValueChanged(evt);
            }
        });
        
        jScrollPane1.setViewportView(attTree);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Attributes"));

        //attTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        

        jLabel6.setText("Type");

        tagAttValue.setText("Value");

        attValue.setText("");

        attChapIdent.setText("");

        tagAttChapIdent.setText("CHAP Ident");

        vendorID.setText("");

        tagVendorID.setText("Vendor ID");

        vendorType.setText("");

        tagVendorType.setText("Vendor Type");

        addButton.setText("Add");
        

        removeButton.setText("Remove");
        

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(attTypeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tagVendorType)
                            .addComponent(tagVendorID)
                            .addComponent(tagAttChapIdent)
                            .addComponent(tagAttValue))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(attChapIdent)
                            .addComponent(attValue, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                            .addComponent(vendorID)
                            .addComponent(vendorType)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeButton)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tagAttValue)
                    .addComponent(attValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attChapIdent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tagAttChapIdent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vendorID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tagVendorID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vendorType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tagVendorType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(removeButton)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mAuth, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(mID, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel5)
                                        .addGap(32, 32, 32)
                                        .addComponent(mSize, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(codeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(codeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mAuth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jMenu1.setText("JRaD Client");
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1027, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
        );

        pack();
        
    }// </editor-fold>                        
   
    
    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {
        resetAll();
    }
    
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
        // Parse Destination
        req.setDestination(InetAddress.getByName(destination.getText()));
        req.setDestinationPort(Integer.valueOf(destinationPort.getText()));
        
        // Parse Origin
        req.setSource(InetAddress.getLocalHost());
        req.setSourcePort(0);
        
        // Set Timestamp
        req.setTimestamp();
        
        // Check there is at least the Code configured
        req.setCode((RADIUS.Code)codeCombo.getSelectedItem());
        
        // Register message in the table
        Object[] row = {new SimpleDateFormat("dd/MM/yy HH:mm:ss.SSS").format(new Timestamp(req.getTimestamp())),
                        req.getDestination().getHostAddress()+":"+req.getDestinationPort(),
                        req.getSource().getHostAddress()+":"+req.getSourcePort(),
                        req.getMIDString(),
                        req.getCode(),
                        req.getLength(),
                        req};
        DefaultTableModel model = (DefaultTableModel) fTable.getModel();
        model.addRow(row);
        
        // Finally Send data by threading
        sender = new UDPSender(req);
        
        //sender.getMessage().print();
        
        sender.start();
        
        // Reset all fields for a new message and create it!
        resetAll();
    }
    
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) throws NoSuchAlgorithmException {                                            
        // TODO add your handling code here:
        RADIUS.Type tempType = (RADIUS.Type) attTypeCombo.getSelectedItem();
        DefaultMutableTreeNode node = new DefaultMutableTreeNode(tempType);
        DefaultMutableTreeNode leaf;
        if(tempType.equals(RADIUS.Type.VENDOR_SPECIFIC)){
            leaf = new DefaultMutableTreeNode(attValue.getText());
            node.add(leaf);
            leaf = new DefaultMutableTreeNode(vendorID.getText());
            node.add(leaf);
            leaf = new DefaultMutableTreeNode(vendorType.getText());
            node.add(leaf);
        } else if(tempType.equals(RADIUS.Type.CHAP_PASSWORD)){
            leaf = new DefaultMutableTreeNode(attValue.getText());
            node.add(leaf);
            leaf = new DefaultMutableTreeNode(attChapIdent.getText());
            node.add(leaf);
        } else {
            leaf= new DefaultMutableTreeNode(attValue.getText());
            node.add(leaf);
        }
        
        attTreeModel.insertNodeInto(node, attTreeRoot, attTreeRoot.getChildCount());
        
        attTreeModel.reload();
        for(int i=0;i<attTree.getRowCount();i++){
            attTree.expandRow(i);
        }
        attTree.setModel(attTreeModel);
        cleanAttFields();
        recalculateMessageSize();
    }
    
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) throws NoSuchAlgorithmException {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) attTree.getLastSelectedPathComponent();

        if (node == null)
            return;
        
        Object nodeInfo = node.getUserObject();
        
        if (node.toString().equals("List of Attributes"))
            return;
        
        DefaultMutableTreeNode attNode;

        if (node.isLeaf())
            attNode = (DefaultMutableTreeNode)node.getParent();
        else
            attNode = node;
        
        attTreeModel.removeNodeFromParent(attNode);
        attTreeModel.reload();
        for(int i=0;i<attTree.getRowCount();i++)
            attTree.expandRow(i);
        
        
        recalculateMessageSize();
    }          

    private void destinationActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void mIDActionPerformed(java.awt.event.ActionEvent evt) {                                    
        // TODO add your handling code here:
    }                                   

    private void mAuthActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
    }                                     

    private void mSizeActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
    }                                     
    
    private void codeComboActionPerformed(java.awt.event.ActionEvent evt) {
        req.setCode((RADIUS.Code)codeCombo.getSelectedItem());
        
    }
    
    private void attTypeComboActionPerformed(java.awt.event.ActionEvent evt) {                                             
        if(attTypeCombo.getSelectedItem().equals(RADIUS.Type.VENDOR_SPECIFIC)){
            vendorID.setVisible(true);
            tagVendorID.setVisible(true);
            vendorType.setVisible(true);
            tagVendorType.setVisible(true);
            attChapIdent.setVisible(false);
            tagAttChapIdent.setVisible(false);
            
            
        } else if(attTypeCombo.getSelectedItem().equals(RADIUS.Type.CHAP_PASSWORD)) {
            vendorID.setVisible(false);
            tagVendorID.setVisible(false);
            vendorType.setVisible(false);
            tagVendorType.setVisible(false);
            attChapIdent.setVisible(true);
            tagAttChapIdent.setVisible(true);
        } else {
            vendorID.setVisible(false);
            tagVendorID.setVisible(false);
            vendorType.setVisible(false);
            tagVendorType.setVisible(false);
            attChapIdent.setVisible(false);
            tagAttChapIdent.setVisible(false);
        }
        vendorID.setText("");
        vendorType.setText("");
        attChapIdent.setText("");
        attValue.setText("");
    }
    
    private void attTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {
       
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) attTree.getLastSelectedPathComponent();

        if (node == null)
            return;
        
        Object nodeInfo = node.getUserObject();
        
        if (node.toString().equals("List of Attributes"))
            return;
        
        DefaultMutableTreeNode attNode;

        if (node.isLeaf())
            attNode = (DefaultMutableTreeNode)node.getParent();
        else
            attNode = node;
        
        System.out.println("Attribute: " + attNode.toString() + " # " + attTreeRoot.getIndex(attNode));
        for(int i=0; i<attNode.getChildCount(); i++)
            System.out.println(String.format("\t [%d] %s", i, attNode.getChildAt(i)));
        
        attTypeCombo.setSelectedItem((RADIUS.Type)attNode.getUserObject());
        
        
        attValue.setText(attNode.getChildAt(0).toString());
        
        if(RADIUS.Type.VENDOR_SPECIFIC.equals((RADIUS.Type)attNode.getUserObject())){
            vendorID.setText(attNode.getChildAt(1).toString());
            vendorType.setText(attNode.getChildAt(2).toString());
        } else if(RADIUS.Type.CHAP_PASSWORD.equals((RADIUS.Type)attNode.getUserObject())) {
            attChapIdent.setText(attNode.getChildAt(1).toString());
        }
        
    }
    
    private void fTable1MouseClicked(java.awt.event.MouseEvent evt) {                                     
        System.out.println("# "+fTable.getSelectedRow());
        
        System.out.println("# "+fTable.getModel().getValueAt(fTable.getSelectedRow(), 6));
        Request treq = (Request)fTable.getModel().getValueAt(fTable.getSelectedRow(), 6);
        treq.print();
        
        resetAll();
        
        /*
        
        // Parse Destination
        req.setDestination(InetAddress.getByName(destination.getText()));
        req.setDestinationPort(Integer.valueOf(destinationPort.getText()));
        
        // Parse Origin
        req.setSource(InetAddress.getLocalHost());
        req.setSourcePort(0);
        
        // Set Timestamp
        req.setTimestamp();
        
        // Check there is at least the Code configured
        req.setCode((RADIUS.Code)codeCombo.getSelectedItem());
        
        // Register message in the table
        Object[] row = {new SimpleDateFormat("dd/MM/yy HH:mm:ss.SSS").format(new Timestamp(req.getTimestamp())),
                        req.getDestination().getHostAddress()+":"+req.getDestinationPort(),
                        req.getSource().getHostAddress()+":"+req.getSourcePort(),
                        req.getMIDString(),
                        req.getCode(),
                        req.getLength(),
                        req};
        DefaultTableModel model = (DefaultTableModel) fTable.getModel();
        model.addRow(row);
        
        // Finally Send data by threading
        sender = new UDPSender(req);
        
        //sender.getMessage().print();
        
        sender.start();
         */
        
        
    }    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientGUI3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton addButton;
    private javax.swing.JTextField attChapIdent;
    private javax.swing.JTree attTree;
    private DefaultMutableTreeNode attTreeRoot;
    private DefaultTreeModel attTreeModel;
    private javax.swing.JComboBox<RADIUS.Type> attTypeCombo;
    private javax.swing.JTextField attValue;
    private javax.swing.JComboBox<RADIUS.Code> codeCombo;
    private javax.swing.JTextField destination;
    private javax.swing.JTextField destinationPort;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel tagVendorType;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel tagAttValue;
    private javax.swing.JLabel tagAttChapIdent;
    private javax.swing.JLabel tagVendorID;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable fTable;
    private RowSorter<TableModel> fSorter;
    private TableColumnModel fTableModel;
    private javax.swing.JTextField mAuth;
    private javax.swing.JTextField mID;
    private javax.swing.JTextField mSize;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextField vendorID;
    private javax.swing.JTextField vendorType;
    private int seed;
    private Request req;
    private UDPSender sender;
    // End of variables declaration          
    
    
    
    
        /** Default sort behaviour, plus every third click removes the sort. */
  private final class CustomSorter extends MouseAdapter {
      
    @Override public void mouseClicked(MouseEvent aEvent) {
       System.out.println("Hi");
      int columnIdx = fTable.getColumnModel().getColumnIndexAtX(aEvent.getX());
      //build a list of sort keys for this column, and pass it to the sorter
      //you can build the list to fit your needs here 
      //for example, you can sort on multiple columns, not just one
      //List<RowSorter.SortKey> sortKeys = new ArrayList<>();
      //cycle through all orders; sort is removed every 3rd click
      SortOrder order =  SortOrder.values()[fCountClicks % 3];
      //sortKeys.add(new RowSorter.SortKey(columnIdx, order));
      //fSorter.setSortKeys(sortKeys);
      CustomSorterSort(columnIdx, order);
      ++fCountClicks;
    }
    private int fCountClicks;
  }
  
  private void CustomSorterSort(int column, SortOrder order){
      List<RowSorter.SortKey> sortKeys = new ArrayList<>();
      sortKeys.add(new RowSorter.SortKey(column, order));
      fSorter.setSortKeys(sortKeys);
  }
  
  private void loadRADIUSValues() {
        
        // load Codes values
        ArrayList<RADIUS.Code> codes = new ArrayList<>(Arrays.asList(RADIUS.Code.values()));
        codes.stream().forEach((current_code) -> {
            codeCombo.addItem(current_code);
        });
        
        // load Codes values
        ArrayList<RADIUS.Type> types = new ArrayList<>(Arrays.asList(RADIUS.Type.values()));
        types.stream().forEach((current_type) -> {
            attTypeCombo.addItem(current_type);
        });
}
  
    private void resetAll() {
        
        cleanAttFields();
        attTypeCombo.setSelectedIndex(0);
        attValue.setVisible(true);
        tagAttValue.setVisible(true);
        attChapIdent.setVisible(false);
        tagAttChapIdent.setVisible(false);
        vendorID.setVisible(false);
        tagVendorID.setVisible(false);
        vendorType.setVisible(false);
        tagVendorType.setVisible(false);
        codeCombo.setSelectedIndex(0);

        attTreeRoot.removeAllChildren();
        attTreeModel.reload();
        
        req = new Request();
        req.setSecretKey("RADIUStest");
        
        seed++;
        seed &= 0xFF;
        
        SecureRandom random = new SecureRandom();
        byte bytes[] = new byte[16];
        random.nextBytes(bytes);
        
        req.setMID(seed);
        req.setAuthenticator(bytes);
        
        mID.setText(req.getMIDString());
        mAuth.setText(Utils.toHexString(req.getAuthenticator()));
        mSize.setText(Integer.toString(req.getLength()));
        
    }
  
  
    private void cleanAttFields() {
        attValue.setText("");
        vendorID.setText("");
        vendorType.setText("");
        attChapIdent.setText("");
    }
    
    private void startListeners() {
        destination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destinationActionPerformed(evt);
            }
        });
        
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    sendButtonActionPerformed(evt);
                } catch (Exception ex) {
                    Logger.getLogger(ClientGUI3.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        codeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codeComboActionPerformed(evt);
            }
        });
        
        mID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mIDActionPerformed(evt);
            }
        });
        
        mAuth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAuthActionPerformed(evt);
            }
        });
        
        mSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mSizeActionPerformed(evt);
            }
        });
        
        attTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attTypeComboActionPerformed(evt);
            }
        });
        
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    addButtonActionPerformed(evt);
                } catch (NoSuchAlgorithmException ex) {
                    Logger.getLogger(ClientGUI3.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    removeButtonActionPerformed(evt);
                } catch (NoSuchAlgorithmException ex) {
                    Logger.getLogger(ClientGUI3.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        fTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fTable1MouseClicked(evt);
            }
        });
    }
    
    private void recalculateMessageSize() throws NoSuchAlgorithmException {
        req.clearAttributes();
        
        DefaultMutableTreeNode attNode;
        
        for(int i=0; i<attTreeRoot.getChildCount(); i++){
            attNode = (DefaultMutableTreeNode)attTreeRoot.getChildAt(i);
            
            if(attNode.getUserObject().equals(RADIUS.Type.VENDOR_SPECIFIC)) {
                if(attNode.getChildCount() == 3) {
                    req.newAttribute((RADIUS.Type)attNode.getUserObject(), Integer.valueOf(attNode.getChildAt(1).toString()), Integer.valueOf(attNode.getChildAt(2).toString()), Utils.stringToByteArray(attNode.getChildAt(0).toString()));
                } else
                    System.err.println("wrong number of VENDOR_SPECIFIC attributes");
            } else if(attNode.getUserObject().equals(RADIUS.Type.CHAP_PASSWORD)) {
                if(attNode.getChildCount() == 2) {
                    req.newAttribute((RADIUS.Type)attNode.getUserObject(), Utils.stringToByteArray(attNode.getChildAt(0).toString()), Integer.valueOf(attNode.getChildAt(1).toString()));
                } else
                    System.err.println("wrong number of CHAP_PASSWORD attributes");
            } else {
                if(attNode.getChildCount() == 1) {
                    req.newAttribute((RADIUS.Type)attNode.getUserObject(), Utils.stringToByteArray(attNode.getChildAt(0).toString()));
                } else
                    System.err.println("wrong number of attributes");
                
            }
        }
        
        mSize.setText(Integer.toString(req.getLength()));
    }
}
